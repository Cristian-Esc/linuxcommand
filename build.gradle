plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'application'
	id 'org.graalvm.buildtools.native' version '0.10.4'
}

group = 'net.esserdi'
version = '02.12.2024-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

graalvmNative {
    binaries {
        main {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(21) // Asegúrate de que coincida con tu versión de Java
            }
         resources.autodetect()
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += '-parameters'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'com.google.zxing:core:3.5.2'
    implementation 'com.google.zxing:javase:3.5.2'
}

application {
    mainClass = "net.esserdi.linuxcommand.LinuxCommandApiApplication"
}


tasks.named('test') {
	useJUnitPlatform()
}





task customizeAndCopyInstallAndUninstallScripts {

   group = 'deployment'
   description = "Construye la distribución y genera los scripts de instalación y desinstalación personalizados."
   
   dependsOn 'bootDistZip' // Construir el paquete de distribución antes de ejecutar el script
    
   def appName = 'linuxcommand'
   def installDir = '/opt'
   def zipPath = "${buildDir}/distributions/${project.name}-boot-${version}.zip"

    doLast {
        // Script de instalación
        def installTemplateFile = file('deploy/install-template.sh')
        def installOutputFile = file("${buildDir}/distributions/install.sh")

        def installScriptContent = installTemplateFile.text
        installScriptContent = installScriptContent
            .replace("{{APP_NAME}}", appName)
            .replace("{{ZIP_PATH}}", zipPath)
            .replace("{{INSTALL_DIR}}", installDir)

        installOutputFile.text = installScriptContent
        println "Script de instalación personalizado copiado a: ${installOutputFile.absolutePath}"

        // Script de desinstalación
        def uninstallTemplateFile = file('deploy/uninstall-template.sh')
        def uninstallOutputFile = file("${buildDir}/distributions/uninstall.sh")

        def uninstallScriptContent = uninstallTemplateFile.text
        uninstallScriptContent = uninstallScriptContent
            .replace("{{APP_NAME}}", appName)
            .replace("{{INSTALL_DIR}}", installDir)

        uninstallOutputFile.text = uninstallScriptContent
        println "Script de desinstalación personalizado copiado a: ${uninstallOutputFile.absolutePath}"
    }
}

